{"ast":null,"code":"import ReviewList from '@/components/ReviewList.vue';\n// import axios from 'axios'\n// import drf from '@/api/drf'\nimport { mapGetters } from 'vuex';\nexport default {\n  name: \"MovieDetailReview\",\n  components: {\n    ReviewList\n  },\n  props: {\n    movieId: Number\n  },\n  data: function () {\n    return {\n      reviewed: false,\n      othersreviewed: false,\n      reviews: [],\n      myreview: {\n        'content': '',\n        'score': 0\n      }\n    };\n  },\n  // methods: {\n  //   onVoice: function () {\n  //     window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition\n  //     const recognition = new window.SpeechRecognition();\n  //     recognition.interimResults = false;\n  //     recognition.lang = 'ko-KR'; \n\n  //     let p = ''\n\n  //     recognition.addEventListener('result', e => {\n  //     const transcript = Array.from(e.results)\n  //       .map(result => result[0])\n  //       .map(result => result.transcript)\n  //       .join('');\n\n  //       p = transcript;\n  //       this.myreview.content += p\n\n  //       if (e.results[0].isFinal) {\n  //         p = ' '\n  //         this.myreview.content += p\n  //       }\n  //     });    \n\n  //     recognition.start();\n  //   },\n  //   deleteReview () {\n  //     axios({\n  //       url: drf.movies.review_ud(this.movieId, this.myreview.id),\n  //       method: 'delete',\n  //       headers: this.authHeader\n  //     })\n  //     this.reviewed = false\n  //     this.myreview = {\n  //       'content': '',\n  //       'score': 0,         \n  //     }\n  //     this.updateStar()\n  //   },\n  //   editReview () {\n  //     this.reviewed = false\n  //   },\n  //   updateStar () {\n  //     const stars = document.querySelectorAll(`#movie-${ this.movieId }-review`)\n  //     for (let star of stars) {        \n  //       if (star.dataset.id <= this.myreview.score) {\n  //         if (!star.classList.contains('star-active')) {\n  //           star.classList.add('star-active')\n  //         }\n  //       } else {\n  //          if (star.classList.contains('star-active')) {\n  //           star.classList.remove('star-active')\n  //         }\n  //       }\n  //     }\n  //   },\n  //   submitReview () {\n  //     if ( this.myreview.score === 0 ) {\n  //       alert('별점을 입력해주세요!')\n  //       return\n  //     }\n  //     if (this.myreview.content === '') {\n  //       alert('내용을 입력해주세요!')\n  //       return\n  //     }\n  //     axios({\n  //       url: drf.movies.reviews(this.movieId),\n  //       method: 'post',\n  //       headers: this.authHeader,\n  //       data: {\n  //         content: this.myreview.content,\n  //         score: this.myreview.score,\n  //       }\n  //     })\n  //     .then(res => {\n  //       this.myreview = res.data\n  //       this.reviewed = true\n  //     })\n  //   },\n  //   selectStar: function (event) {\n  //     if (!this.reviewed) {\n  //       const selectScore = event.target.dataset.id\n  //       this.myreview.score = selectScore\n  //       const stars = document.querySelectorAll(`#movie-${ this.movieId }-review`)\n  //       for (let star of stars) {\n  //         if (star.dataset.id <= selectScore) {\n  //           if (!star.classList.contains('star-active')) {\n  //             star.classList.add('star-active')\n  //           }\n  //         } else {\n  //            if (star.classList.contains('star-active')) {\n  //             star.classList.remove('star-active')\n  //           }\n  //         }\n  //       }\n  //     }\n  //   },\n  // },\n  computed: {\n    ...mapGetters(['authHeader']),\n    reviewIdPath: function () {\n      return `movie-${this.movieId}-review`;\n    }\n  }\n  // created () {\n  //   axios({\n  //     url: drf.movies.movie(this.movieId),\n  //     method: 'get',\n  //   })\n  //   .then(res => {\n  //     this.reviews = res.data.reviews\n  //     axios({\n  //       url: drf.accounts.currentUserInfo(),\n  //       method: 'get',\n  //       headers: this.authHeader\n  //     })\n  //     .then(res => {\n  //       const userId = res.data.pk\n  //       this.reviews.map(review => {\n  //         if (review.user.id === userId) {\n  //           this.reviewed = true\n  //           this.myreview = review\n  //         }\n  //       })\n  //       if (this.reviewed) {\n\n  //         const idx = this.reviews.indexOf(this.myreview)\n  //         this.reviews.splice(idx, 1)\n  //       }\n  //       if (this.reviews.length > 0) {\n  //         this.othersreviewed = true\n  //       }\n  //     })\n  //   })\n  // },\n  // updated () {\n  //   this.updateStar()\n  // }\n};","map":{"version":3,"mappings":"AAsCA;AACA;AACA;AACA;AAEA;EACAA;EACAC;IACAC;EACA;EACAC;IACAC;EACA;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;QACA;QACA;MACA;IACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAC;IACA;IACAC;MACA;IACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA","names":["name","components","ReviewList","props","movieId","data","reviewed","othersreviewed","reviews","myreview","computed","reviewIdPath"],"sourceRoot":"src/components","sources":["MovieDetailReview.vue"],"sourcesContent":["<template>\n  <div class=\"movie-review-section\">\n    <p class=\"review-text\">Reviews</p>\n    <div id=\"review-input-box\">\n      <div class=\"star-rate-box\">\n        <i :id=\"reviewIdPath\" data-id=\"1\" class=\"fa-solid fa-star\" @click=\"selectStar\"></i>\n        <i :id=\"reviewIdPath\" data-id=\"2\" class=\"fa-solid fa-star\" @click=\"selectStar\"></i>\n        <i :id=\"reviewIdPath\" data-id=\"3\" class=\"fa-solid fa-star\" @click=\"selectStar\"></i>\n        <i :id=\"reviewIdPath\" data-id=\"4\" class=\"fa-solid fa-star\" @click=\"selectStar\"></i>\n        <i :id=\"reviewIdPath\" data-id=\"5\" class=\"fa-solid fa-star\" @click=\"selectStar\"></i>\n      </div>\n      <div v-if=\"reviewed\">\n        <div class=\"myreview-content\">\n          <p>{{ myreview.content }}</p>\n        </div>\n        <div class=\"submit-buttons\">\n          <button @mousedown=\"editReview()\" class=\"btn btn-link\">Update</button>\n          <button @click=\"deleteReview()\" class=\"btn btn-link\">Delete</button>\n        </div>\n      </div> \n    </div>\n    <div v-if=\"!reviewed\" class=\"review-content-input-box\">\n      <textarea @keypress.enter=\"submitReview()\" v-model=\"myreview.content\" type=\"text\" name=\"\" class=\"review-content-input\" placeholder=\"Write the review...\" required />\n      <div class=\"input-submit-buttons\">\n        <button @mouseenter=\"onVoice\" class=\"btn btn-link input-voice-btn\">\n          <i class=\"fa-solid fa-microphone\"></i>\n        </button>\n        <button @click=\"submitReview()\" class=\"btn btn-link input-submit-bnt\">Submit</button>\n      </div>\n    </div>\n    <div style=\"margin-top: 2rem;\">\n      <ReviewList v-if=\"othersreviewed\" :reviews=\"reviews\" />\n      <div v-else class=\"none-review-text\">There are no reviews written yet...</div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport ReviewList from '@/components/ReviewList.vue'\n// import axios from 'axios'\n// import drf from '@/api/drf'\nimport { mapGetters } from 'vuex'\n\nexport default {\n  name: \"MovieDetailReview\",\n  components: {\n    ReviewList,\n  },\n  props: {\n    movieId: Number,\n  },\n  data: function () {\n    return {\n      reviewed: false,\n      othersreviewed: false,\n      reviews: [],\n      myreview: {\n        'content': '',\n        'score': 0,\n      },\n    }\n  },\n  // methods: {\n  //   onVoice: function () {\n  //     window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition\n  //     const recognition = new window.SpeechRecognition();\n  //     recognition.interimResults = false;\n  //     recognition.lang = 'ko-KR'; \n\n  //     let p = ''\n    \n  //     recognition.addEventListener('result', e => {\n  //     const transcript = Array.from(e.results)\n  //       .map(result => result[0])\n  //       .map(result => result.transcript)\n  //       .join('');\n\n  //       p = transcript;\n  //       this.myreview.content += p\n\n  //       if (e.results[0].isFinal) {\n  //         p = ' '\n  //         this.myreview.content += p\n  //       }\n  //     });    \n\n  //     recognition.start();\n  //   },\n  //   deleteReview () {\n  //     axios({\n  //       url: drf.movies.review_ud(this.movieId, this.myreview.id),\n  //       method: 'delete',\n  //       headers: this.authHeader\n  //     })\n  //     this.reviewed = false\n  //     this.myreview = {\n  //       'content': '',\n  //       'score': 0,         \n  //     }\n  //     this.updateStar()\n  //   },\n  //   editReview () {\n  //     this.reviewed = false\n  //   },\n  //   updateStar () {\n  //     const stars = document.querySelectorAll(`#movie-${ this.movieId }-review`)\n  //     for (let star of stars) {        \n  //       if (star.dataset.id <= this.myreview.score) {\n  //         if (!star.classList.contains('star-active')) {\n  //           star.classList.add('star-active')\n  //         }\n  //       } else {\n  //          if (star.classList.contains('star-active')) {\n  //           star.classList.remove('star-active')\n  //         }\n  //       }\n  //     }\n  //   },\n  //   submitReview () {\n  //     if ( this.myreview.score === 0 ) {\n  //       alert('별점을 입력해주세요!')\n  //       return\n  //     }\n  //     if (this.myreview.content === '') {\n  //       alert('내용을 입력해주세요!')\n  //       return\n  //     }\n  //     axios({\n  //       url: drf.movies.reviews(this.movieId),\n  //       method: 'post',\n  //       headers: this.authHeader,\n  //       data: {\n  //         content: this.myreview.content,\n  //         score: this.myreview.score,\n  //       }\n  //     })\n  //     .then(res => {\n  //       this.myreview = res.data\n  //       this.reviewed = true\n  //     })\n  //   },\n  //   selectStar: function (event) {\n  //     if (!this.reviewed) {\n  //       const selectScore = event.target.dataset.id\n  //       this.myreview.score = selectScore\n  //       const stars = document.querySelectorAll(`#movie-${ this.movieId }-review`)\n  //       for (let star of stars) {\n  //         if (star.dataset.id <= selectScore) {\n  //           if (!star.classList.contains('star-active')) {\n  //             star.classList.add('star-active')\n  //           }\n  //         } else {\n  //            if (star.classList.contains('star-active')) {\n  //             star.classList.remove('star-active')\n  //           }\n  //         }\n  //       }\n  //     }\n  //   },\n  // },\n  computed: {\n    ...mapGetters(['authHeader']),\n    reviewIdPath: function () {\n      return `movie-${ this.movieId }-review`\n    }\n  },\n  // created () {\n  //   axios({\n  //     url: drf.movies.movie(this.movieId),\n  //     method: 'get',\n  //   })\n  //   .then(res => {\n  //     this.reviews = res.data.reviews\n  //     axios({\n  //       url: drf.accounts.currentUserInfo(),\n  //       method: 'get',\n  //       headers: this.authHeader\n  //     })\n  //     .then(res => {\n  //       const userId = res.data.pk\n  //       this.reviews.map(review => {\n  //         if (review.user.id === userId) {\n  //           this.reviewed = true\n  //           this.myreview = review\n  //         }\n  //       })\n  //       if (this.reviewed) {\n          \n  //         const idx = this.reviews.indexOf(this.myreview)\n  //         this.reviews.splice(idx, 1)\n  //       }\n  //       if (this.reviews.length > 0) {\n  //         this.othersreviewed = true\n  //       }\n  //     })\n  //   })\n  // },\n  // updated () {\n  //   this.updateStar()\n  // }\n}\n</script>\n\n<style>\n.movie-review-section {\n  width: 100%;\n  padding: 1rem;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n}\n\n.star-rate-box {\n  display: flex;\n  justify-content: flex-start;\n  margin: 0.5rem;\n}\n\n.review-text {\n  color: white;\n  font-size: 1.5rem;\n  font-weight: bold;\n  margin-left: 10px;\n}\n\n#review-input-box {\n  width: 100%;\n}\n\n.review-content-input-box {\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  margin-top: 0px;\n}\n\n.review-content-input {\n  width: 100%;\n  height: 8rem;\n  border-radius: 20px;\n  background-color: rgba(255, 255, 255, 0.397);\n  outline: none;\n  border: none;\n  border-right: 0px;\n  border-top: 0px;\n  border-left: 0px;\n  border-bottom:0px;\n  padding: 20px;\n  padding-top: 20px;\n  color: white;\n}\n\n.review-content-input text {\n  color: white;\n}\n\n.review-content-input:focus { \n  box-shadow: 3px 3px 7px #01a8b1a4;\n}\n\n.review-content-input-box .input-submit-bnt {\n  background: none;\n  color:#00595e;\n  text-decoration: none;\n  position: relative;\n  align-self: flex-end;\n  transition: .3s;\n}\n\n.review-content-input-box button:hover,\n.review-content-input-box button:focus,\n.submit-buttons button:hover,\n.submit-buttons button:focus {\n  color: #00cbd6;\n  transform: scale(1.1);\n}\n\n.myreview-content {\n  color: white;\n  width: 100%;\n  height: 8rem;\n  border-radius: 20px;\n  background-color: rgba(255, 255, 255, 0.397);\n  padding: 20px;\n  text-align: start;\n}\n\n.input-submit-buttons {\n  display: flex;\n  justify-content: flex-end;\n  position: relative;\n  bottom: 35px;\n}\n\n.submit-buttons {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.input-submit-buttons button,\n.submit-buttons button {\n  background: none;\n  color: #00595e;\n  text-decoration: none;\n  transition: .3s;\n}\n\n.none-review-text {\n  color: white;\n  margin-bottom: 3rem;\n}\n\n.fa-star:hover {\n  transform: scale(1.2);\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}